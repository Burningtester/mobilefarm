name: Android CI Example Workflow

on:
  push:
    branches:
      - main
  pull_request:

env:
  SELECTEL_AUTH_TOKENS_URL: "https://cloud.api.selcloud.ru/identity/v3/auth/tokens"
  SELECTEL_MOBILE_FARM_API_URL: "https://api.selectel.ru/mobfarm/api"
  USER_NAME: "Germaine"
  PASSWORD: ${{ secrets.PASSWORD }}
  PROJECT_NAME: "My First Project"
  ACCOUNT_NAME: "455944"
  DEVICE_SERIAL: "4c8093ff01d047b19c12b1b917d7ce88"

jobs:
  run-autotests:
    runs-on: ubuntu-latest
    container:
      image: thyrlian/android-sdk:10.0 # Prebuilt Android SDK Docker image

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl jq

      - name: Update Android SDK
        run: |
          sdkmanager --update
          sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools" "cmdline-tools;latest"

      - name: Install Gradle dependencies
        run: ./gradlew dependencies

      - name: Build APK
        run: ./gradlew assembleDebug

      - name: Obtain Authorization Token
        run: |
          response=$(curl -s -D - -X POST \
            --header "Content-Type: application/json" \
            --data-raw "{
              \"auth\": {
                \"identity\": {
                  \"methods\": [\"password\"],
                  \"password\": {
                    \"user\": {
                      \"name\": \"$USER_NAME\",
                      \"domain\": { \"name\": \"$ACCOUNT_NAME\" },
                      \"password\": \"$PASSWORD\"
                    }
                  }
                },
                \"scope\": {
                  \"project\": {
                    \"name\": \"$PROJECT_NAME\",
                    \"domain\": { \"name\": \"$ACCOUNT_NAME\" }
                  }
                }
              }
            }" \
            $SELECTEL_AUTH_TOKENS_URL)
          
          token=$(echo "$response" | grep -i "^x-subject-token" | awk '{print $2}' | tr -d '\r')
          
          if [ -z "$token" ]; then
            echo "Error: unable to obtain X-Auth-Token."
            exit 1
          fi
          
          echo "Successfully obtained X-Auth-Token."
          echo "X_AUTH_TOKEN=$token" >> $GITHUB_ENV

      - name: Generate ADB Key Pair
        run: |
          mkdir -p ~/.android  
          adb keygen ~/.android/adbkey  
          adb pubkey ~/.android/adbkey > ~/.android/adbkey.pub

      - name: Store ADB Key in Mobile Farm
        shell: bash
        run: |
          # Load token from env
          echo "X_AUTH_TOKEN=$X_AUTH_TOKEN"
          adb_pub_key=$(cat ~/.android/adbkey.pub)
          
          curl --location "$SELECTEL_MOBILE_FARM_API_URL/v2/keys/adb" \
            --header "Content-Type: application/json" \
            --header "X-Auth-Token: $X_AUTH_TOKEN" \
            --data "$(jq -n --arg title "$GITHUB_RUN_ID" --arg pubKey "$adb_pub_key" '{"title": $title, "publicKey": $pubKey}')" \
            > response.json
          
          fingerprint=$(jq -r '.publicKey.fingerprint' response.json)
          
          if [ -z "$fingerprint" ]; then
            echo "Error: ADB key was not successfully stored."
            exit 1
          fi
          
          echo "Successfully stored ADB key."
          echo "FINGERPRINT=$fingerprint" >> $GITHUB_ENV

      - name: Assign Device
        shell: bash
        run: |
          curl --location --request POST "$SELECTEL_MOBILE_FARM_API_URL/v1/user/devices" \
            --header "Accept: application/json" \
            --header "X-Auth-Token: $X_AUTH_TOKEN" \
            --header "Content-Type: application/json" \
            --data "{\"serial\": \"$DEVICE_SERIAL\", \"timeout\": 300000}"

      - name: Start Remote ADB Connection
        shell: bash
        run: |
          curl --location --request POST "$SELECTEL_MOBILE_FARM_API_URL/v1/user/devices/$DEVICE_SERIAL/remoteConnect" \
            --header "Accept: application/json" \
            --header "X-Auth-Token: $X_AUTH_TOKEN" \
            --output response_body.txt
          
          remote_connect_url=$(jq -r '.remoteConnectUrl // ""' response_body.txt)
          
          if [ -z "$remote_connect_url" ]; then
            echo "Error: unable to start remote ADB connect session."
            exit 1
          fi
          
          echo "Successfully started remote ADB connect session."
          echo "UDID=$remote_connect_url" >> $GITHUB_ENV

      - name: Connect to ADB
        run: |
          adb connect $UDID
          sleep 1
          adb devices
          echo "Device is ready"

      - name: Run Tests
        run: |
          export ADB_INSTALL_TIMEOUT=5
          ./gradlew connectedAndroidTest --info

      - name: Release Device
        if: ${{ always() }}
        shell: bash
        run: |
          curl --location --request DELETE "$SELECTEL_MOBILE_FARM_API_URL/v1/user/devices/$DEVICE_SERIAL" \
            --header "Accept: application/json" \
            --header "X-Auth-Token: $X_AUTH_TOKEN"

      - name: Remove ADB Key
        if: ${{ always() && env.FINGERPRINT != null && env.FINGERPRINT != '' }}
        shell: bash
        run: |
          curl --location --request DELETE "$SELECTEL_MOBILE_FARM_API_URL/v2/keys/adb/$FINGERPRINT" \
            --header "Accept: application/json" \
            --header "X-Auth-Token: $X_AUTH_TOKEN"
